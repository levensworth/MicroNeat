import typing
import numpy as np

_T = typing.TypeVar("_T")


def chance(p: float) -> bool:
    """Randomly returns `True` or `False`.

    Args:
        p (float): Float between 0 and 1. Specifies the chance of the function
            returning True.

    Returns:
        A randomly chosen boolean value (`True` or `False`).
    """
    return np.random.uniform(low=0, high=1) < p


def select_choice(elements: list[_T], **kwargs: typing.Any) -> _T:
    return np.random.choice(elements, **kwargs)  # type: ignore


def rank_prob_dist(size: int, coefficient: float, min_prob: float = 1e-9) -> np.ndarray:
    """Calculates a probability distribution that associates a probability to
    each position of a rank with the given size.

    Args:
        size (int): Size of the rank (and of the probability distribution).
        coefficient (float): This constant (let's call it `c`) can be
            interpreted as follows: the position `p` of the rank is assigned a
            probability that is `c` times higher than the position `p + 1` of
            the rank. If c = 2, here is an example of a probability distribution
            generated by this function: `[0.5, 0.25, 0.125, 0.0675, ...]`.
        min_prob (float): Probabilities with a value lower than the value passed
            to this parameter will be converted to 0. This prevents the
            occurrence of an arithmetic underflow.

    Returns:
        A numpy array with the probability distribution. The value in the index
        `i` of the array represents the probability of the position `i` of the
        rank.
    """
    prob = np.zeros(size)
    prob[0] = 1 - 1 / coefficient
    for i in range(1, size):
        p = prob[i - 1] / coefficient
        if p < min_prob:
            break
        prob[i] = p
    return prob
